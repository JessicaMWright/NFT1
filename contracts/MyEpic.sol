//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

// We first import some OpenZeppelin Contracts.
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "hardhat/console.sol";

// We inherit the contract we imported. This means we'll have access
// to the inherited contract's methods.
contract MyEpicNFT is ERC721URIStorage {
  // Magic given to us by OpenZeppelin to help us keep track of tokenIds.
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  // We need to pass the name of our NFTs token and its symbol.
  constructor() ERC721 ("SquareNFT", "SQUARE") {
    console.log("This is my NFT contract. Woah!");
  }

  // A function our user will hit to get their NFT.
  function makeAnEpicNFT() public {
     // Get the current tokenId, this starts at 0.
    uint256 newItemId = _tokenIds.current();

     // Actually mint the NFT to the sender using msg.sender.
    _safeMint(msg.sender, newItemId);

    // Set the NFTs data.
    _setTokenURI(newItemId, 'data:application/json;base64,ewogICAgIm5hbWUiOiAiWmVubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiRnVja0RhdERvZSIsCiAgICAiaW1hZ2UiOiAiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwvOWovNEFBUVNrWkpSZ0FCQVFBQUFRQUJBQUQvMndDRUFFTkRRME5IUTB0VFUwdG9jR1J3YUpxTmdZR05tdW1tczZhenB1bi8zUC9jM1AvYy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOEJRME5EUTBkRFMxTlRTMmh3WkhCb21vMkJnWTJhNmFhenByT202Zi9jLzl6Yy85ei8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9BQUJFSUFPRUE0UU1CSWdBQ0VRRURFUUgveEFCdEFBQURBUUVCQUFBQUFBQUFBQUFBQUFBQUFRSURCQVVRQUFNQkFBSUNBUUlGQkFJREFBQUFBQUFCQWhFREVpRXhVU0pCRTBKU1lYRUVGQ015UTRGeWdwRUJBUUVCQVFBQUFBQUFBQUFBQUFBQUFBQUJBZ01SQVFFQkFRQUFBQUFBQUFBQUFBQUFBQUFCRVRILzJnQU1Bd0VBQWhFREVRQS9BT29CYWcxRzNFeUcyTDJCVkF5SFNSQzVPM2xTQnNCa3I3RnFnRzIwbjVISElxOE5ZeUc5SjlVcStDV0s2aUthMUlhcE15cHBPcVpFUnkxbUlrenJYYjBJcjZUVFRRYU1rMlVtMHdOUmtLa3dWZVdzOUJHaFNiTVZTbzBrRFVESlUrN245alVnQUFRUUFBQUJKUUlDOEFBSXJCZ0JEZW0wVjJSTGVpRTJGQkYxNEcyWnI2cWIrQ0xHbXFaQ3FyTklyenNncVJCYzIrMUlGYjhwL09Fei92WkZQRzJ2MUFhN1VOSnZVWFJtNlZTa0p2V1VUK2NsZWgvbWY4Q24wUlFtMmtWclRSbjZVc3NEUUliN1dRRSs2S0xiYXFtdmd2czF4OXZ2MU1rOW1rL1k5L3hmK3BCckwyMjMrZ3ZiYzlwWml2TlV2bURYanJWNSt3UU82M2ovQUhSY2R1cTdacE5lZVRpLzdOUkVvQUFDQVlBQlFBQkZjdWlBbG13MjhJQWxzaWh2UkFBVUFHb25RS0FXajFBR3BDMWlFQlNBa1pBRFdDQW9vQmFNQzFqS0pHbmpDTk1RMW03aUpBSTNXRE00WllReGlHUUFBQUZBQUVWeHRrREpacFNiRUFNQmFJQUNnQUVBd0FmMkFrUUFSUU5DQUJnSVlBTVNHQmN0bEVTVVZGcGxHYWVNMENLbG1oa2kwRVdtVVpsb2lHQUFCUUFCRmNCTDBvbWpTa0xSQUZBaGlJcERRZ0FvWkkwVVBDU3lkVEFrQmd5QkFBQU1aSXdLVHdzekdteW9zcVdRVklSb05QR1NpZ05DMFpvMFFySmdBRUZBQUVWd3RZeUtObVlHbFFJcGtrYUFBQUFBQUEwTUpXblJFb0NGeHY3czBYQ21hem1sb0RtL3RrWVZ4VlBvOVF6YUlQTS9iMHdPcmtqVWNvQU1RRkRHSVlGYU5lMFFhSXFMS0pMd0lwR2lNeWxvUm9BQVJGQUFFVnlHVkdwalhzMElaSlFpTmtBQUFBQXdOSjhZYnlZR3lBMFh0R2hFbWlSQlltZ0RVUVkwY1BJc283cWFiZU13dWRUUlJ6QUlZRFF4SW9vRWFTU1d2UlVhVDZLUk0raTBHVmdKRENLUUFCQlFBQkZjcjlzd3IyemZxOVpsUzNUUkdURXltaVdSb2dBQW9HaEFnTlViTDBZeTBVcTErQU5JdnE4bzNPZnd6ZVhxQXlWM2M0OVRKL0RiZm0yYVBFeGE5V0FQOE5UNkllczBwK1BaQkJ5MnNza3F2TnNrQUtSSlJSUm92UkVtbWFWbFhwTmx5MjF1RTR6VllrZ2dTR0FCRFF5UmtGZ0FFVmhXZFdaS1VsN09ocGRXc01Xc3pEUXlwR0xSMFY2TWE5aFlrR01SR2lFQUFhZXkxNFNTV3N5VE5ZNUduaVFDZmRKNm1tYjhGOWtSeVBtOU5Jd25rY1B3aURyNWM4R0RtNlRadHdQdTdiOWc0NVpiNnNET0pubzJEaE9mUm9vdW45YkxlSW80b2x1V3hQMnpxNmRKdzVXc29nRU1CcjJVYVNXazNtRWFwWGs2T0xlaTBNdFJNWUJFZ0FGUUFBQVdBQVpWbGJhYThHZkozK3h1eUNveU1YTFRaMHRlTk1xS3JGK3lUUi9KQWFRT1Z0SkF3VHh5L2htVlg0MTRWOUhodjJpdWlkYkdOTU9tUFdrVVYyZDYyUnd5bnlzZFdrdkhrZjhBVGtIVFVPYTd5djVRUGxqOXpZaCtQSkJDZFAxT2Z5Vm1HaExLTWJPU21xNkpmbE9xamxTODEvSUJob3BXb01TS1hsbW1WcmpsMG5odVRLeElvaUFBQUNRQUNvQUFBTEFBTXRFSmpGUldXVmFaUFcwamVQVFQ5cGlwWTJWWE9SNStEV2xrbGRWbUJYS1BEWHFrbWlNYXpTS2pxamRSTCt5TWpXR0ZQa2xLUW5raVdndjZwYU1PbUx5UWVnK1ZKRXpidDVoandjZm50UjJKSkFSQ2NyQ21Oa05nWlVaS1RTdEUrSy8xRlNweEZkY2FhRitGZmpXYlFubjFab1pXZ0FBQUdCTEFBQUNvQUFBTEFBTXRFQUFWa0VYTzU1TEFERnA2a2lsRDNkTk1TR05WenZoT2RxazEyWGhNOUFUU2FhWkRYRmlhSWhuUytCYnMwYy9MSFN5dFJvQ1d0R0tvSGI5SUs5Q1ZpUlhlUDFJODJaNWErVGVQNlorNklOdVhsVW9sVW10UTZtSUlBSzFwNFpMbTVJZVVhTWprWDA3KzVSdFBQRkdxYWE4SG50SmlYZWY5YURPUFNBNGx6OGk5bzFYOVRBVEY4MXVJMUdNY3ZOYTFSQnJjcm1qRlNNbHdVc1M1Wk0xdWNING5ObGVJOEZkK2JaWCtMeUxweUwvbmtGd1hxemxXcEVVMWZNOThRWmYzRjlzeURSY1ZyeXVXQ2Y3Ynp2ZUFPckY4QU1BRFJrZ25odHlVTVFBTUJESUFES3VhSkpidTB2OEFaSUxpN3RUNldzNGJmSlgxV21hY0x0TnJjeE5tZFZkNTIxaHJNU1dtaUNvMVZIOG9xdXRVaDkvZWVUbXFXK1MzdmpzenA4VGlYd1RSakt1MzNvcHRKTnMydHJ3em1YK1RsVXYwQlVlYzBPZnhNbzFoZWFJVjkzeXo5bElIT0FBYVFCaVlBVWFSNDQrZitCVXRqaitaZ1A4QWk1UCtpZStUNTk1U09kNnNYWGxaOFBrRDgvSzk4cVdEV1h6L0FMUUs4cW44NHlLVGhTdWxQeDJRNDN0eEw1eGhXY3YvQU5rM2p5K0Qvd0FBTlFFQUNHQUhSeUFhd0piU1RiQWJ0VDViT1crZDE0a3l1bmJFUnFRanBkeXBlSmVram5BTk51QnRPOC9TeFJWUGxodG1hck56N3JCSnROTkVIUTU4Y2FmNnlOdDNqKzFtZmVuOTM3MGJ1M20wQjA4dGRQSHl3dHJ0UHgxV3M1dTlOTmE4WSsxUE5Zd2JLM3lPMnZHVDROWlRWUjVlNGM4ZHQxR3p2cWsyd0tieWVUNTZzNTUraUg4MFNydDA2MFJaQjBKNDRuOHJnVDJWbnpCbDJycjEzd0hhczY2OEdJa0FBMExpcGhVNlcrVVU3NGZGUGhzejZWY1dwVytVVm5OOStKNTB3NTNxeG8rZmpmZmVLeGZqY1N2ZndxSmE1bi94TW5ram50cC9oc2l0SjVlRkx4eFdFOC9FdXVSUXY4KzYrSms5T1ZwTDhKZ2RnQUFFSW9BT2prREhtLzBBQVJ5SUFBTmdBQWdCQUFVREFBR2hnQUc4ZWtSei9sQUFJQUFLZ0FBS0FBQURmZzkwYmdCenZWZ0FBSW9BQUF6QUFBLy8yUT09Igp9');

    console.log("An NFT w/ ID %s has been minted to %s", newItemId, msg.sender);

    // Increment the counter for when the next NFT is minted.
    _tokenIds.increment();
  }
}